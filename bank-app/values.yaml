global:
  ports:
    front_ui_port: 80
    mailhog_smtp_port: 1025
    mailhog_http_port: 8025
    keycloak_port: 8080
    accounts_port: 8082
    cash_port: 8099
    transfer_port: 8090
    exchange_generator_port: 8091
    exchange_port: 8093
    notifications_port: 8095
    blocker_port: 8097
  uri:
    keycloak_issuer: "http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.ports.keycloak_port }}/realms/bank-realm"
    database: "{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local"
    mailhog: "{{ .Release.Name }}-bank-mailhog.{{ .Release.Namespace }}.svc.cluster.local"
  postgresql:
    username: postgres
    password: postgres
  keycloak:
    realm: "bank-realm"
  clients:
    client_account_uri: http://{{ .Release.Name }}-bank-accounts.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.ports.accounts_port }}/api
    client_exchange_uri: http://{{ .Release.Name }}-bank-exchange.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.ports.exchange_port }}/api
    client_cash_uri: http://{{ .Release.Name }}-bank-cash.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.ports.cash_port }}/api
    client_transfer_uri: http://{{ .Release.Name }}-bank-transfer.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.ports.transfer_port }}/api
    client_blocker_uri: http://{{ .Release.Name }}-bank-blocker.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.ports.blocker_port }}/api
    client_notifications_uri: http://{{ .Release.Name }}-bank-notifications.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.global.ports.notifications_port }}/api
  kafka:
    url: "{{ .Release.Name }}-kafka-broker-0.{{ .Release.Name }}-kafka-broker-headless:9092,{{ .Release.Name }}-kafka-broker-1.{{ .Release.Name }}-kafka-broker-headless:9092"
  zipkin:
    url: "http://{{ .Release.Name }}-zipkin:9411/api/v2/spans"
postgresql:
  image:
    tag: 17

  auth:
    username: postgres
    password: postgres
    database: postgres

  primary:
    initdb:
      scripts:
        init-multiple-dbs.sql: |-
          CREATE DATABASE accounts;
          CREATE DATABASE notifications;
          CREATE DATABASE cash;
          CREATE DATABASE exchange_rates;
          CREATE DATABASE transfers;
  services:
    ports:
      postgresql: 5432

  persistence:
    enabled: true
    size: 500Mi

kafka:
  kraft:
    enabled: true
    clusterId: "bank-app-cluster-id"
  controller:
    replicaCount: 2
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi
  broker:
    replicaCount: 2
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi
  listeners:
    client:
      protocol: PLAINTEXT
    controller:
      protocol: PLAINTEXT
  controllerOnly:
    enabled: false
  auth:
    enabled: false # без SASL/SSL (для dev)
  networkPolicy:
    enabled: false
  provisioning:
    enabled: true
    topics:
      - name: rates
        partitions: 1
        replicationFactor: 1
      - name: notifications
        partitions: 1
        replicationFactor: 1

zipkin:
  storageType: mem
  cassandra:
    enabled: false

logstash:
  imageTag: 8.18.0
  esJavaOpts: "-Xmx1g -Xms1g"
  extraEnvs:
    - name: LOGSTASH_SETTING_XPACK_MONITORING_ENABLED
      value: "false"
  logstashConfig:
    logstash.yml: |
      xpack.monitoring.enabled: false
      xpack.monitoring.elasticsearch.hosts: ["https://elasticsearch:9200"]
      xpack.monitoring.elasticsearch.ssl.verification_mode: "none"
  logstashPipeline:
    monitoring.conf: |
      input {
        kafka {
          bootstrap_servers => "bank-app-kafka-broker-0.bank-app-kafka-broker-headless:9092,bank-app-kafka-broker-1.bank-app-kafka-broker-headless:9092"
          topics => ["input-logs"]
          group_id => "logs-group"
        }
      }
      filter {
        grok {
          match => { "message" => "%{TIME:time} %{LOGLEVEL:log-level}%{SPACE} \[%{DATA:app}/%{DATA:method}/%{DATA:line}/%{DATA:traceId}/%{DATA:spanId}\]: %{GREEDYDATA:msg}" }
        }
      }
      output {
        elasticsearch {
          hosts => ["https://elasticsearch:9200"]
          index => "logs-%{+dd.MM.YYYY}"
          retry_on_conflict => 3
          action => "create"
          ssl_enabled => true
          ssl_verification_mode => "none"
        }
      }
elasticsearch:
  tls:
    enabled: false
  masterService: "elasticsearch"
  imageTag: 8.18.0
  replicas: 1
  minimumMasterNodes: 1
  esJavaOpts: "-Xmx1g -Xms1g"
  clusterHealthCheckParams: ""
  security:
    enabled: true
    elasticPassword: "elastic"
    createDefaultSecret: true
  esConfig:
    elasticsearch.yml: |
      xpack.security.http.ssl.enabled: false
      xpack.security.enabled: true

kibana:
  enabled: false
  replicaCount: 1
  elasticsearchHosts: "https://elasticsearch:9200"
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  service:
    type: NodePort
    nodePort: 32000
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: kibana.example.com
        paths:
          - path: /
            pathType: Prefix
  env:
    - name: ELASTICSEARCH_USERNAME
      value: "kibana_system"
    - name: ELASTICSEARCH_PASSWORD
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: kibana_password

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      serviceMonitorSelector: {}
      podMonitorSelector: {}
  grafana:
    enabled: true
    adminPassword: "admin"
    service:
      type: ClusterIP
  prometheus-node-exporter:
    hostRootFsMount:
      enabled: false

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  hosts:
    - host: bank-app.local
      paths:
        - path: /api(/|$)(.*)
          pathType: Prefix

bank-accounts:
  image:
    repository: bank-accounts
    tag: latest
  ingress:
    enabled: true
    hostname: bank-accounts.local


bank-front-ui:
  image:
    repository: bank-front-ui
    tag: latest
  ingress:
    enabled: true
    hostname: bank-front-ui.local

bank-exchange:
  image:
    repository: bank-exchange
    tag: latest
  ingress:
    enabled: true
    hostname: bank-exchange.local

bank-exchange-generator:
  image:
    repository: bank-exchange-generator
    tag: latest
  ingress:
    enabled: true
    hostname: bank-exchange-generator.local
