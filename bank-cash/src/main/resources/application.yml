server:
  port: 8099
spring:
  application:
    name: bank-cash
  r2dbc:
    url: r2dbc:${SPRING_DATASOURCE_URL}
    username: ${POSTGRESQL_USER:postgres}
    password: ${POSTGRESQL_PASSWORD:postgres}
  jpa:
    show-sql: true
  liquibase:
    url: jdbc:${SPRING_DATASOURCE_URL}
    user: ${POSTGRESQL_USER:postgres}
    password: ${POSTGRESQL_PASSWORD:postgres}
    change-log: classpath:/db/changelog/db.changelog-master.yml
  security:
    oauth2:
      client:
        registration:
          bank-cash-client:
            client-id: cash
            client-secret: ${BANK_CASH_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            provider: keycloak
        provider:
          keycloak:
            token-uri: ${KEYCLOAK_ISSUER_URI}/protocol/openid-connect/token
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_BANK_REALM_URI}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      properties:
        acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    admin:
      client-id: bank-cash
    consumer:
      properties:
        security.protocol: PLAINTEXT

clients:
  accounts:
    uri: ${CLIENT_ACCOUNTS_URI}
  blocker:
    uri: ${CLIENT_BLOCKER_URI}
  notifications:
    uri: ${CLIENT_NOTIFICATIONS_URI}

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always
